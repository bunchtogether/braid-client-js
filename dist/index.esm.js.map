{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.esm.js","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport IsomorphicWebSocket from 'isomorphic-ws';\nimport PQueue from 'p-queue';\nimport ObservedRemoveMap from 'observed-remove/dist/map';\n\nimport {\n  encode,\n  decode,\n  Credentials,\n  CredentialsResponse,\n  DataDump,\n  SubscribeRequest,\n  SubscribeResponse,\n  Unsubscribe,\n  EventSubscribeRequest,\n  EventSubscribeResponse,\n  EventUnsubscribe,\n  BraidEvent,\n  PublishRequest,\n  PublishResponse,\n  PublisherMessage,\n  Unpublish,\n} from '@bunchtogether/braid-messagepack';\n\n// Overwrite local setTimeout for debugging purposes\n// const oldSetTimeout = setTimeout;\n// setTimeout = (f, d) => {\n//   const e = new Error('TIMEOUT');\n//   const timeout = oldSetTimeout(() => {\n//     f();\n//     console.log('TIMEOUT RUNNING', e);\n//   }, d);\n//   return timeout;\n// };\n\nconst log = (color:string, name:string, value:string | number, ...args:Array<any>) => {\n  const label = `%c${name}: %c${value}`;\n  if (args.length === 0) {\n    console.log(label, 'color:#333; font-weight: bold', `color:${color}`); // eslint-disable-line no-console\n    return;\n  }\n  console.group(label, 'color:#333; font-weight: bold', `color:${color}`); // eslint-disable-line no-console\n  for (const arg of args) {\n    if (typeof arg === 'undefined') {\n      continue;\n    } else if (typeof arg === 'string') {\n      console.log(`%c${arg}`, 'color:#666'); // eslint-disable-line no-console\n    } else {\n      if (arg && arg.err) {\n        console.error(arg.err); // eslint-disable-line no-console\n      } else if (arg && arg.error) {\n        console.error(arg.error); // eslint-disable-line no-console\n      }\n      console.dir(arg); // eslint-disable-line no-console\n    }\n  }\n  console.groupEnd(); // eslint-disable-line no-console\n};\n\nconst baseLogger = {\n  debug: (value:string | number, ...args:Array<any>) => {\n    log('blue', 'Braid Client', value, ...args);\n  },\n  info: (value:string | number, ...args:Array<any>) => {\n    log('green', 'Braid Client', value, ...args);\n  },\n  warn: (value:string | number, ...args:Array<any>) => {\n    log('orange', 'Braid Client', value, ...args);\n  },\n  error: (value:string | number, ...args:Array<any>) => {\n    log('red', 'Braid Client', value, ...args);\n  },\n  errorStack: (error:Error | MediaError) => {\n    console.error(error); // eslint-disable-line no-console\n  },\n};\n\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void\n};\n\n/**\n * Class representing a connection error\n */\nexport class ConnectionError extends Error {\n  constructor(message:string) {\n    super(message);\n    this.name = 'ConnectionError';\n  }\n}\n\n/**\n * Class representing a credentials error\n */\nexport class CredentialsError extends Error {\n  declare code: number;\n  constructor(message:string, code:number) {\n    super(message);\n    this.name = 'CredentialsError';\n    this.code = code;\n  }\n}\n\n/**\n * Class representing a subscribe error\n */\nexport class SubscribeError extends Error {\n  declare code: number;\n  declare itemKey: string;\n  constructor(itemKey: string, message:string, code:number) {\n    super(message);\n    this.itemKey = itemKey;\n    this.name = 'SubscribeError';\n    this.code = code;\n  }\n}\n\n/**\n * Class representing an event subscribe error\n */\nexport class EventSubscribeError extends Error {\n  declare code: number;\n  declare itemName: string;\n  constructor(itemName: string, message:string, code:number) {\n    super(message);\n    this.itemName = itemName;\n    this.name = 'EventSubscribeError';\n    this.code = code;\n  }\n}\n\n\n/**\n * Class representing an publishing error\n */\nexport class PublishError extends Error {\n  declare code: number;\n  declare itemName: string;\n  constructor(itemName: string, message:string, code:number) {\n    super(message);\n    this.itemName = itemName;\n    this.name = 'PublishError';\n    this.code = code;\n  }\n}\n\n/**\n * Class representing an error that interupts a pending server\n * request, for example if a connection closes prematurely\n */\nexport class ServerRequestError extends Error {\n  declare code: number;\n  constructor(message:string, code:number) {\n    super(message);\n    this.name = 'ServerRequestError';\n    this.code = code;\n  }\n}\n\nconst isTransactionError = (error:Error) => (error instanceof SubscribeError) || (error instanceof EventSubscribeError) || (error instanceof PublishError);\n\n/**\n * Class representing a Braid Client\n */\nexport default class Client extends EventEmitter {\n  /**\n   * Create a Braid Client.\n   */\n  constructor() {\n    super();\n    /**\n     * Primary data object. Like a native JS Map but with 'set' and 'delete' events.\n     *\n     * @type ObservedRemoveMap<K, V>\n     * @public\n     */\n    this.data = new ObservedRemoveMap(undefined, { bufferPublishing: 0 });\n    this.timeoutDuration = 60000;\n    this.subscriptions = new Set();\n    this.connectionQueue = new PQueue({ concurrency: 1 });\n    this.credentialQueue = new PQueue({ concurrency: 1 });\n    this.confirmedSubscriptions = new Set();\n    this.receivers = new Set();\n    this.confirmedReceivers = new Set();\n    this.eventSubscriptions = new Map();\n    this.confirmedEventSubscriptions = new Set();\n    this.setMaxListeners(0);\n    this.reconnectAttempts = 0;\n    this.publishQueueMap = new Map();\n    this.subscribeRequestPromises = new Map();\n    this.eventSubscribeRequestPromises = new Map();\n    this.publishRequestPromises = new Map();\n    this.setReconnectHandler(() => true);\n    this.logger = baseLogger;\n    this.credentialQueue.once('active', () => {\n      this.credentialQueue.on('idle', () => {\n        this.logger.info('Credentials queue is idle, sending requests');\n        this.sendRequests();\n      });\n    });\n  }\n\n  /**\n   * Set the reconnect handler. The handler determines if the reconnect should continue.\n   * @param {(credentials: Object) => boolean} func - Credentials handler.\n   * @return {void}\n   */\n  setReconnectHandler(func: (Object) => boolean) { // eslint-disable-line no-unused-vars\n    this.reconnectHandler = func;\n  }\n\n  /**\n   * Connects to a server.\n   * @param {string} address Websocket URL of the server\n   * @param {Object} [credentials] Credentials to send\n   * @return {Promise<void>}\n   */\n\n  async open(address:string, credentials?:Object):Promise<void> {\n    // Store this for the stack trace\n    this.reconnectErrorWithTrace = new Error('Reconnect error');\n    if (this.connectionQueue.size > 0 || this.connectionQueue.pending > 0) {\n      this.logger.error(`Connection already initiated, ${this.connectionQueue.size} connection${this.connectionQueue.size !== 1 ? 's' : ''} queued and ${this.connectionQueue.pending} connection${this.connectionQueue.pending !== 1 ? 's' : ''} pending`);\n    }\n    this.shouldReconnect = true;\n    try {\n      const response = await this.connectionQueue.add(() => this._open(address, credentials)); // eslint-disable-line no-underscore-dangle\n      return response;\n    } catch (error) {\n      this.logger.error(`Open attempt failed: ${error.message}`);\n      if (error instanceof CredentialsError) {\n        await this.close(1008, 'Invalid credentials');\n      }\n      throw error;\n    }\n  }\n\n  async _open(address:string, credentials?:Object) {\n    if (!this.shouldReconnect) {\n      return;\n    }\n    const oldWs = this.ws;\n    if (oldWs) {\n      if (this.address === address) {\n        if (JSON.stringify(credentials || '') === JSON.stringify(this.credentials || '')) {\n          this.logger.error(`Connection already open, duplicate open call made to ${address} using the same credentials`);\n        } else if (typeof credentials === 'object') {\n          this.logger.error(`Connection already open, open call made to ${address} using alternate credentials`);\n          await this.credentialQueue.add(() => this._sendCredentials(credentials)); // eslint-disable-line no-underscore-dangle\n        } else {\n          this.logger.error(`Connection already open, open call made to ${address} without credentials`);\n          await this.credentialQueue.add(() => this._sendCredentials({})); // eslint-disable-line no-underscore-dangle\n        }\n        return;\n      }\n      this.logger.error(`Connection already open, closing connection to ${this.address} and opening new connection to ${address}`);\n      this.shouldReconnect = false;\n      await new Promise((resolve, reject) => {\n        const handleClose = () => {\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('error', handleError);\n          resolve();\n        };\n        const handleError = (error: Error) => {\n          if (isTransactionError(error)) {\n            return;\n          }\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('error', handleError);\n          reject(error);\n        };\n        this.on('close', handleClose);\n        this.on('error', handleError);\n        const timeout = setTimeout(() => {\n          const error = new ConnectionError(`Did not receive a close event after ${this.timeoutDuration * 2 / 1000} seconds`);\n          this.emit('error', error);\n        }, this.timeoutDuration * 2);\n        oldWs.close(1000, `Connecting to ${address}`);\n      });\n      this.shouldReconnect = true;\n      await this._open(address, credentials); // eslint-disable-line no-underscore-dangle\n      return;\n    }\n\n    clearTimeout(this.reconnectTimeout);\n\n    this.address = address;\n\n    const ws = new IsomorphicWebSocket(address);\n\n    const heartbeatInterval = setInterval(() => {\n      if (ws.readyState === 1) {\n        ws.send(new Uint8Array([0]));\n      }\n    }, 5000);\n\n    const flushInterval = setInterval(() => {\n      this.data.flush();\n    }, 30000);\n\n    ws.binaryType = 'arraybuffer';\n\n    ws.onopen = () => {\n      this.emit('open');\n      this.ws = ws;\n    };\n\n    ws.onclose = (event) => {\n      clearInterval(heartbeatInterval);\n      clearInterval(flushInterval);\n      const { wasClean, reason, code } = event;\n      let calculatedReason = reason;\n\n      if (!calculatedReason) {\n        if (code === 1000) {\n          calculatedReason = 'Normal closure, meaning that the purpose for which the connection was established has been fulfilled.';\n        } else if (code === 1001) {\n          calculatedReason = 'An endpoint is \"going away\", such as a server going down or a browser having navigated away from a page.';\n        } else if (code === 1002) {\n          calculatedReason = 'An endpoint is terminating the connection due to a protocol error';\n        } else if (code === 1003) {\n          calculatedReason = 'An endpoint is terminating the connection because it has received a type of data it cannot accept (e.g., an endpoint that understands only text data MAY send this if it receives a binary message).';\n        } else if (code === 1004) {\n          calculatedReason = 'Reserved. The specific meaning might be defined in the future.';\n        } else if (code === 1005) {\n          calculatedReason = 'No status code was actually present.';\n        } else if (code === 1006) {\n          calculatedReason = 'The connection was closed abnormally, e.g., without sending or receiving a Close control frame';\n        } else if (code === 1007) {\n          calculatedReason = 'An endpoint is terminating the connection because it has received data within a message that was not consistent with the type of the message (e.g., non-UTF-8 [http://tools.ietf.org/html/rfc3629] data within a text message).';\n        } else if (code === 1008) {\n          calculatedReason = 'An endpoint is terminating the connection because it has received a message that \"violates its policy\". This reason is given either if there is no other sutible reason, or if there is a need to hide specific details about the policy.';\n        } else if (code === 1009) {\n          calculatedReason = 'An endpoint is terminating the connection because it has received a message that is too big for it to process.';\n        } else if (code === 1010) {\n          calculatedReason = `An endpoint (client) is terminating the connection because it has expected the server to negotiate one or more extension, but the server didn't return them in the response message of the WebSocket handshake. <br /> Specifically, the extensions that are needed are: ${reason || 'Unknown'}`;\n        } else if (code === 1011) {\n          calculatedReason = 'A server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request.';\n        } else if (code === 1015) {\n          calculatedReason = \"The connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified).\";\n        } else {\n          calculatedReason = '';\n        }\n      }\n      if (wasClean) {\n        this.logger.warn(`Cleanly closed websocket connection to Braid server at ${this.address} with code ${code}${calculatedReason ? `: ${calculatedReason}` : ''}`);\n      } else {\n        this.logger.warn(`Uncleanly closed websocket connection to Braid server at ${this.address} with code ${code}${calculatedReason ? `: ${calculatedReason}` : ''}`);\n      }\n      delete this.ws;\n      this.confirmedSubscriptions.clear();\n      this.confirmedEventSubscriptions.clear();\n      this.confirmedReceivers.clear();\n      this.emit('close', code, reason);\n      this.reconnect();\n    };\n\n    ws.onmessage = (event) => {\n      const { data } = event;\n      const message = decode(Buffer.from(data));\n      if (message instanceof DataDump) {\n        this.emit('process', message.queue);\n        this.data.process(message.queue, true); // eslint-disable-line no-underscore-dangle\n      } else if (message instanceof CredentialsResponse) {\n        this.emit('credentialsResponse', message.value.success, message.value.code, message.value.message);\n      } else if (message instanceof SubscribeResponse) {\n        this.emit('subscribeResponse', message.value.key, message.value.success, message.value.code, message.value.message);\n      } else if (message instanceof EventSubscribeResponse) {\n        this.emit('eventSubscribeResponse', message.value.name, message.value.success, message.value.code, message.value.message);\n      } else if (message instanceof PublishResponse) {\n        this.emit('publishResponse', message.value.key, message.value.success, message.value.code, message.value.message);\n      } else if (message instanceof BraidEvent) {\n        const callbacks = this.eventSubscriptions.get(message.name);\n        if (!callbacks) {\n          return;\n        }\n        for (const callback of callbacks) {\n          callback(...message.args);\n        }\n      }\n    };\n\n    ws.onerror = () => {\n      if (this.shouldReconnect) {\n        this.emit('error', new ConnectionError(`Websocket error when connecting to ${this.address}, check the 'close' event for additional details`));\n      } else {\n        this.logger.warn(`Websocket error when connecting to ${this.address}, check the 'close' event for additional details`);\n      }\n    };\n\n    await new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        this.removeListener('open', handleOpen);\n        this.removeListener('error', handleError);\n        this.removeListener('close', handleClose);\n        try {\n          ws.close(1011, `Timeout after ${this.timeoutDuration * 2}`);\n        } catch (error) {\n          this.logger.error(`Unable to close connection to ${this.address}: ${error.message}`);\n        }\n        reject(new Error(`Timeout when opening connection to ${this.address}`));\n      }, this.timeoutDuration * 2);\n      const handleOpen = () => {\n        clearTimeout(timeout);\n        this.removeListener('open', handleOpen);\n        this.removeListener('error', handleError);\n        this.removeListener('close', handleClose);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        if (isTransactionError(error)) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('open', handleOpen);\n        this.removeListener('error', handleError);\n        this.removeListener('close', handleClose);\n        reject(error);\n      };\n      const handleClose = () => {\n        clearTimeout(timeout);\n        this.removeListener('open', handleOpen);\n        this.removeListener('error', handleError);\n        this.removeListener('close', handleClose);\n        this.logger.error('Connection closed before an open event was received');\n        reject(new ServerRequestError('Connection closed before an open event was received', 502));\n      };\n      this.on('open', handleOpen);\n      this.on('error', handleError);\n      this.on('close', handleClose);\n    });\n\n    this.logger.info(`Opened websocket connection to Braid server at ${this.address}`);\n\n    if (typeof credentials === 'object') {\n      await this.credentialQueue.add(() => this._sendCredentials(credentials)); // eslint-disable-line no-underscore-dangle\n    } else {\n      await this.sendRequests();\n    }\n  }\n\n  async sendRequests() {\n    const promises = [];\n\n    for (const key of this.subscriptions) {\n      promises.push(this.sendSubscribeRequest(key).catch((error) => {\n        if (error.code === 502) {\n          return;\n        }\n        if (error instanceof SubscribeError && error.itemKey === key) {\n          this.emit('error', error);\n          return;\n        }\n        throw error;\n      }));\n    }\n\n    for (const name of this.eventSubscriptions.keys()) {\n      promises.push(this.sendEventSubscribeRequest(name).catch((error) => {\n        if (error.code === 502) {\n          return;\n        }\n        if (error instanceof EventSubscribeError && error.itemName === name) {\n          this.emit('error', error);\n          return;\n        }\n        throw error;\n      }));\n    }\n\n    for (const name of this.receivers) {\n      promises.push(this.sendPublishRequest(name).catch((error) => {\n        if (error.code === 502) {\n          return;\n        }\n        if (error instanceof PublishError && error.itemName === name) {\n          this.emit('error', error);\n          return;\n        }\n        throw error;\n      }));\n    }\n\n    await Promise.all(promises);\n  }\n\n  reconnect() {\n    if (!this.shouldReconnect) {\n      this.emit('reconnect', false);\n      return;\n    }\n    clearTimeout(this.reconnectTimeout);\n    clearTimeout(this.reconnectAttemptResetTimeout);\n    clearTimeout(this.reconnectAttemptResetTimeout);\n    const duration = this.reconnectAttempts > 5 ? 25000 + Math.round(Math.random() * 10000) : this.reconnectAttempts * this.reconnectAttempts * 1000;\n    this.reconnectAttempts += 1;\n    this.logger.warn(`Reconnect attempt ${this.reconnectAttempts} in ${Math.round(duration / 100) / 10} seconds`);\n    if (this.reconnectErrorWithTrace instanceof Error) {\n      this.logger.errorStack(this.reconnectErrorWithTrace);\n    }\n    this.reconnectTimeout = setTimeout(async () => {\n      clearTimeout(this.reconnectAttemptResetTimeout);\n      const shouldReconnect = this.reconnectHandler(this.credentials);\n      this.emit('reconnect', shouldReconnect !== false);\n      if (shouldReconnect === false) {\n        this.logger.warn(`Reconnect attempt ${this.reconnectAttempts} cancelled by reconnect handler`);\n        this.shouldReconnect = false;\n        this.reconnectAttempts = 0;\n        return;\n      }\n      this.logger.warn(`Reconnect attempt ${this.reconnectAttempts}`);\n      try {\n        await this.connectionQueue.add(() => this._open(this.address, this.credentials)); // eslint-disable-line no-underscore-dangle\n      } catch (error) {\n        this.logger.error(`Reconnect attempt ${this.reconnectAttempts} failed: ${error.message}`);\n        this.emit('error', error);\n      }\n      this.reconnectAttemptResetTimeout = setTimeout(() => {\n        this.reconnectAttempts = 0;\n      }, 60000);\n    }, duration);\n  }\n\n  /**\n   * Close connection to server.\n   * @param {number} [code] Websocket close reason code to send to the server\n   * @param {string} [reason] Websocket close reason to send to the server\n   * @return {Promise<void>}\n   */\n  async close(code?: number, reason?: string) {\n    clearTimeout(this.reconnectTimeout);\n    clearTimeout(this.reconnectAttemptResetTimeout);\n    this.emit('closeRequested');\n    this.shouldReconnect = false;\n    this.connectionQueue.clear();\n    this.credentialQueue.clear();\n    await Promise.all([\n      this.connectionQueue.onIdle(),\n      this.credentialQueue.onIdle(),\n    ]);\n    clearTimeout(this.reconnectTimeout);\n    clearTimeout(this.reconnectAttemptResetTimeout);\n    const ws = this.ws;\n    if (!ws) {\n      return;\n    }\n    await new Promise((resolve, reject) => {\n      const handleClose = () => {\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        this.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error: Error) => {\n        if (isTransactionError(error)) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        this.removeListener('error', handleError);\n        reject(error);\n      };\n      this.on('close', handleClose);\n      this.on('error', handleError);\n      const timeout = setTimeout(() => {\n        const error = new ConnectionError(`Did not receive a close event after ${this.timeoutDuration * 2 / 1000} seconds`);\n        this.emit('error', error);\n      }, this.timeoutDuration * 2);\n      ws.close(code, reason);\n    });\n  }\n\n  /**\n   * Send credentials to a server with an open connection.\n   * @param {Object} [credentials] Credentials to send\n   * @return {Promise<void>}\n   */\n  async sendCredentials(credentials: Object):Promise<void> {\n    if (this.credentialQueue.size > 0 || this.credentialQueue.pending > 0) {\n      this.logger.error(`Credentials already sent, ${this.credentialQueue.size} request${this.credentialQueue.size !== 1 ? 's' : ''} queued and ${this.credentialQueue.pending} request${this.credentialQueue.pending !== 1 ? 's' : ''} pending`);\n    }\n    try {\n      const response = await this.credentialQueue.add(() => this._sendCredentials(credentials)); // eslint-disable-line no-underscore-dangle\n      return response;\n    } catch (error) {\n      this.logger.error(`Send credentials attempt failed: ${error.message}`);\n      if (error instanceof CredentialsError) {\n        await this.close(1008, 'Invalid credentials');\n      }\n      throw error;\n    }\n  }\n\n  async _sendCredentials(credentials: Object) {\n    const ws = this.ws;\n    if (!ws) {\n      throw new Error(`Can not send credentials, connection to ${this.address} is not open`);\n    }\n    this.credentials = credentials;\n    await new Promise((resolve, reject) => {\n      const handleCloseRequested = () => {\n        clearTimeout(timeout);\n        this.removeListener('closeRequested', handleCloseRequested);\n        this.removeListener('credentialsResponse', handleCredentialsResponse);\n        this.removeListener('close', handleClose);\n        this.removeListener('error', handleError);\n        this.logger.error('Connection close requested before a credentials response was received');\n        const error = new ServerRequestError('Connection close requested before a credentials response was received', 502);\n        reject(error);\n      };\n      const handleCredentialsResponse = (success, code, message) => {\n        clearTimeout(timeout);\n        this.removeListener('closeRequested', handleCloseRequested);\n        this.removeListener('credentialsResponse', handleCredentialsResponse);\n        this.removeListener('close', handleClose);\n        this.removeListener('error', handleError);\n        if (success === true) {\n          resolve();\n        } else {\n          reject(new CredentialsError(message, code));\n        }\n      };\n      const handleClose = () => {\n        clearTimeout(timeout);\n        this.removeListener('closeRequested', handleCloseRequested);\n        this.removeListener('credentialsResponse', handleCredentialsResponse);\n        this.removeListener('close', handleClose);\n        this.removeListener('error', handleError);\n        this.logger.error('Connection closed before a credentials response was received');\n        const error = new ServerRequestError('Connection closed before a credentials response was received', 502);\n        reject(error);\n      };\n      const handleError = (error:Error) => {\n        if (isTransactionError(error)) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('closeRequested', handleCloseRequested);\n        this.removeListener('credentialsResponse', handleCredentialsResponse);\n        this.removeListener('close', handleClose);\n        this.removeListener('error', handleError);\n        this.logger.error(`Error received before a credentials response was received: ${error.message || 'Unknown error'}`);\n        const serverRequestError = new ServerRequestError(`Error received before a credentials response was received: ${error.message || 'Unknown error'}`, 500);\n        reject(serverRequestError);\n      };\n      const timeout = setTimeout(() => {\n        clearTimeout(timeout);\n        this.removeListener('closeRequested', handleCloseRequested);\n        this.removeListener('credentialsResponse', handleCredentialsResponse);\n        this.removeListener('close', handleClose);\n        this.removeListener('error', handleError);\n        this.logger.error('Connection closed before a credentials response was received');\n        const error = new ServerRequestError(`Credentials response timeout after ${Math.round(this.timeoutDuration / 100) / 10} seconds`, 504);\n        reject(error);\n      }, this.timeoutDuration);\n      this.on('closeRequested', handleCloseRequested);\n      this.on('credentialsResponse', handleCredentialsResponse);\n      this.on('close', handleClose);\n      this.on('error', handleError);\n      ws.send(encode(new Credentials(credentials)));\n    });\n  }\n\n  /**\n   * Subscribe to updates on a key.\n   * @param {string} key Key to request updates on\n   * @param {(any, any) => void} [callback] Optional callback function\n   * @return {Promise<void>}\n   */\n  async subscribe(key: string) {\n    if (this.confirmedSubscriptions.has(key)) {\n      return;\n    }\n    this.emit('subscribe', key);\n    this.subscriptions.add(key);\n    if (this.ws) {\n      this.sendSubscribeRequest(key).catch((error) => {\n        this.emit('error', error);\n      });\n    }\n    const errorWithTrace = new Error();\n    await new Promise((resolve, reject) => {\n      const handleCloseRequested = () => {\n        clearTimeout(timeout);\n        this.removeListener('closeRequested', handleCloseRequested);\n        this.removeListener('error', handleError);\n        this.removeListener('subscribeRequestSuccess', handleSubscribeRequestSuccess);\n        resolve();\n      };\n      const timeout = setTimeout(() => {\n        this.removeListener('closeRequested', handleCloseRequested);\n        this.removeListener('error', handleError);\n        this.removeListener('subscribeRequestSuccess', handleSubscribeRequestSuccess);\n        this.unsubscribe(key);\n        const error = new SubscribeError(key, `Subscription timeout after ${Math.round(this.timeoutDuration / 100) / 10} seconds`, 504);\n        error.stack = [error.message].concat(errorWithTrace.stack.split('\\n').slice(1)).join('\\n');\n        reject(error);\n      }, this.timeoutDuration + 1000);\n      const handleError = (error:Error | SubscribeError) => {\n        if (!(error instanceof SubscribeError)) {\n          return;\n        }\n        if (error.itemKey !== key) {\n          return;\n        }\n        if (error.code === 502) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('closeRequested', handleCloseRequested);\n        this.removeListener('error', handleError);\n        this.removeListener('subscribeRequestSuccess', handleSubscribeRequestSuccess);\n        this.unsubscribe(key);\n        error.stack = [error.message].concat(errorWithTrace.stack.split('\\n').slice(1)).join('\\n'); // eslint-disable-line no-param-reassign\n        reject(error);\n      };\n      const handleSubscribeRequestSuccess = (k:string) => {\n        if (k !== key) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('closeRequested', handleCloseRequested);\n        this.removeListener('error', handleError);\n        this.removeListener('subscribeRequestSuccess', handleSubscribeRequestSuccess);\n        resolve();\n      };\n      this.on('closeRequested', handleCloseRequested);\n      this.on('error', handleError);\n      this.on('subscribeRequestSuccess', handleSubscribeRequestSuccess);\n    });\n  }\n\n  /**\n   * Send subscribe request to server\n   * @param {string} key Key to request updates on\n   * @return {Promise<void>}\n   */\n  sendSubscribeRequest(key: string):Promise<void> {\n    let promise = this.subscribeRequestPromises.get(key);\n    if (promise) {\n      return promise;\n    }\n    promise = this._sendSubscribeRequest(key); // eslint-disable-line no-underscore-dangle\n    this.subscribeRequestPromises.set(key, promise);\n    promise.then(() => {\n      this.subscribeRequestPromises.delete(key);\n    }).catch(() => {\n      this.subscribeRequestPromises.delete(key);\n    });\n    return promise;\n  }\n\n  async _sendSubscribeRequest(key: string) {\n    if (this.connectionQueue.size > 0) {\n      this.logger.warn(`Not sending subscription request, ${this.connectionQueue.size} pending ${this.connectionQueue.size === 1 ? 'connection' : 'connections'}`);\n      this.emit('subscribeRequestCredentialsCheck', key);\n      return;\n    }\n    if (this.credentialQueue.size > 0) {\n      this.logger.warn(`Not sending subscription request, ${this.credentialQueue.size} pending ${this.credentialQueue.size === 1 ? 'credential' : 'credentials'}`);\n      this.emit('subscribeRequestCredentialsCheck', key);\n      return;\n    }\n    const ws = this.ws;\n    if (!ws) {\n      throw new SubscribeError(key, 'Connection closed before a subscription request was sent', 502);\n    }\n    await new Promise((resolve, reject) => {\n      const handleSubscribeResponse = (k, success, code, message) => {\n        if (k !== key) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('subscribeResponse', handleSubscribeResponse);\n        this.removeListener('close', handleClose);\n        this.removeListener('error', handleError);\n        if (success === true) {\n          this.confirmedSubscriptions.add(key);\n          this.emit('subscribeRequestSuccess', key);\n          resolve();\n        } else {\n          const error = new SubscribeError(key, message, code);\n          reject(error);\n        }\n      };\n      const handleClose = () => {\n        clearTimeout(timeout);\n        this.removeListener('subscribeResponse', handleSubscribeResponse);\n        this.removeListener('close', handleClose);\n        this.removeListener('error', handleError);\n        const closeError = new SubscribeError(key, 'Connection closed before a subscription response was received', 502);\n        reject(closeError);\n      };\n      const handleError = (error:Error) => {\n        if (isTransactionError(error)) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('subscribeResponse', handleSubscribeResponse);\n        this.removeListener('close', handleClose);\n        this.removeListener('error', handleError);\n        if (error instanceof ConnectionError) {\n          reject(new SubscribeError(key, `Connection error received before a subscription response was received: ${error.message || 'Unknown error'}`, 502));\n          return;\n        }\n        reject(new SubscribeError(key, `Error received before a subscription response was received: ${error.message || 'Unknown error'}`, 500));\n      };\n      const timeout = setTimeout(() => {\n        this.removeListener('subscribeResponse', handleSubscribeResponse);\n        this.removeListener('close', handleClose);\n        this.removeListener('error', handleError);\n        const error = new SubscribeError(key, `Subscription response timeout after ${Math.round(this.timeoutDuration / 100) / 10} seconds`, 504);\n        reject(error);\n      }, this.timeoutDuration);\n      this.on('subscribeResponse', handleSubscribeResponse);\n      this.on('close', handleClose);\n      this.on('error', handleError);\n      ws.send(encode(new SubscribeRequest(key)));\n    });\n  }\n\n  /**\n   * Unsubscribe from updates on a key. If the callback parameter is not provided, all callbacks are unsubscribed.\n   * @param {string} key Key to stop updates on\n   * @param {(any, any) => void} [callback] Optional callback function\n   * @return {Promise<void>}\n   */\n  unsubscribe(key: string) {\n    if (!this.subscriptions.has(key)) {\n      return;\n    }\n    this.subscriptions.delete(key);\n    this.confirmedSubscriptions.delete(key);\n    const ws = this.ws;\n    if (!ws) {\n      return;\n    }\n    ws.send(encode(new Unsubscribe(key)));\n  }\n\n  /**\n   * Subscribe to a server event\n   * @param {string} name Name of the event to listen for\n   * @param {(...any) => void} callback Callback\n   * @return {Promise<void>}\n   */\n\n  async addServerEventListener(name: string, callback?: (...any) => void) {\n    let callbacks = this.eventSubscriptions.get(name);\n    if (!callbacks) {\n      callbacks = new Set();\n      this.eventSubscriptions.set(name, callbacks);\n    }\n    if (typeof callback === 'function') {\n      callbacks.add(callback);\n    }\n    if (this.confirmedEventSubscriptions.has(name)) {\n      return;\n    }\n    if (this.ws) {\n      this.sendEventSubscribeRequest(name).catch((error) => {\n        this.emit('error', error);\n      });\n    }\n    const errorWithTrace = new Error();\n    await new Promise((resolve, reject) => {\n      const handleCloseRequested = () => {\n        clearTimeout(timeout);\n        this.removeListener('closeRequested', handleCloseRequested);\n        this.removeListener('error', handleError);\n        this.removeListener('eventSubscribeRequestSuccess', handleEventSubscribeRequestSuccess);\n        resolve();\n      };\n      const timeout = setTimeout(() => {\n        this.removeListener('closeRequested', handleCloseRequested);\n        this.removeListener('error', handleError);\n        this.removeListener('eventSubscribeRequestSuccess', handleEventSubscribeRequestSuccess);\n        this.removeServerEventListener(name);\n        const error = new EventSubscribeError(name, `Event subscription timeout after ${Math.round(this.timeoutDuration / 100) / 10} seconds`, 504);\n        error.stack = [error.message].concat(errorWithTrace.stack.split('\\n').slice(1)).join('\\n');\n        reject(error);\n      }, this.timeoutDuration + 1000);\n      const handleError = (error:Error | EventSubscribeError) => {\n        if (!(error instanceof EventSubscribeError)) {\n          return;\n        }\n        if (error.itemName !== name) {\n          return;\n        }\n        if (error.code === 502) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('closeRequested', handleCloseRequested);\n        this.removeListener('error', handleError);\n        this.removeListener('eventSubscribeRequestSuccess', handleEventSubscribeRequestSuccess);\n        this.removeServerEventListener(name);\n        error.stack = [error.message].concat(errorWithTrace.stack.split('\\n').slice(1)).join('\\n'); // eslint-disable-line no-param-reassign\n        reject(error);\n      };\n      const handleEventSubscribeRequestSuccess = (n:string) => {\n        if (n !== name) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('closeRequested', handleCloseRequested);\n        this.removeListener('error', handleError);\n        this.removeListener('eventSubscribeRequestSuccess', handleEventSubscribeRequestSuccess);\n        resolve();\n      };\n      this.on('closeRequested', handleCloseRequested);\n      this.on('error', handleError);\n      this.on('eventSubscribeRequestSuccess', handleEventSubscribeRequestSuccess);\n    });\n  }\n\n  /**\n   * Send event subscribe request to server\n   * @param {string} name Name of the event to listen for\n   * @return {Promise<void>}\n   */\n  sendEventSubscribeRequest(name: string):Promise<void> {\n    let promise = this.eventSubscribeRequestPromises.get(name);\n    if (promise) {\n      return promise;\n    }\n    promise = this._sendEventSubscribeRequest(name); // eslint-disable-line no-underscore-dangle\n    this.eventSubscribeRequestPromises.set(name, promise);\n    promise.then(() => {\n      this.eventSubscribeRequestPromises.delete(name);\n    }).catch(() => {\n      this.eventSubscribeRequestPromises.delete(name);\n    });\n    return promise;\n  }\n\n  async _sendEventSubscribeRequest(name: string) {\n    if (this.connectionQueue.size > 0) {\n      this.logger.warn(`Not sending event subscription request, ${this.connectionQueue.size} pending ${this.connectionQueue.size === 1 ? 'connection' : 'connections'}`);\n      this.emit('eventSubscribeRequestCredentialsCheck', name);\n      return;\n    }\n    if (this.credentialQueue.size > 0) {\n      this.logger.warn(`Not sending event subscription request, ${this.credentialQueue.size} pending ${this.credentialQueue.size === 1 ? 'credential' : 'credentials'}`);\n      this.emit('eventSubscribeRequestCredentialsCheck', name);\n      return;\n    }\n    const ws = this.ws;\n    if (!ws) {\n      throw new EventSubscribeError(name, 'Connection closed before an event subscription request was sent', 502);\n    }\n    await new Promise((resolve, reject) => {\n      const handleEventSubscribeResponse = (n, success, code, message) => {\n        if (n !== name) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('eventSubscribeResponse', handleEventSubscribeResponse);\n        this.removeListener('close', handleClose);\n        this.removeListener('error', handleError);\n        if (success === true) {\n          this.confirmedEventSubscriptions.add(name);\n          this.emit('eventSubscribeRequestSuccess', name);\n          resolve();\n        } else {\n          const error = new EventSubscribeError(name, message, code);\n          reject(error);\n        }\n      };\n      const handleClose = () => {\n        clearTimeout(timeout);\n        this.removeListener('eventSubscribeResponse', handleEventSubscribeResponse);\n        this.removeListener('close', handleClose);\n        this.removeListener('error', handleError);\n        const closeError = new EventSubscribeError(name, 'Connection closed before an event subscription response was received', 502);\n        reject(closeError);\n      };\n      const handleError = (error:Error) => {\n        if (isTransactionError(error)) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('eventSubscribeResponse', handleEventSubscribeResponse);\n        this.removeListener('close', handleClose);\n        this.removeListener('error', handleError);\n        if (error instanceof ConnectionError) {\n          reject(new EventSubscribeError(name, `Connection error received before an event subscription response was received: ${error.message || 'Unknown error'}`, 502));\n          return;\n        }\n        reject(new EventSubscribeError(name, `Error received before an event subscription response was received: ${error.message || 'Unknown error'}`, 500));\n      };\n      const timeout = setTimeout(() => {\n        this.removeListener('eventSubscribeResponse', handleEventSubscribeResponse);\n        this.removeListener('close', handleClose);\n        this.removeListener('error', handleError);\n        const error = new EventSubscribeError(name, `Event subscription response timeout after ${Math.round(this.timeoutDuration / 100) / 10} seconds`, 504);\n        reject(error);\n      }, this.timeoutDuration);\n      this.on('eventSubscribeResponse', handleEventSubscribeResponse);\n      this.on('close', handleClose);\n      this.on('error', handleError);\n      ws.send(encode(new EventSubscribeRequest(name)));\n    });\n  }\n\n  /**\n   * Unsubscribe from a server event. If the callback parameter is not provided, all callbacks are unsubscribed.\n   * @param {string} name Name of the event to stop listening\n   * @param {(...any) => void} [callback] Callback\n   * @return {Promise<void>}\n   */\n  removeServerEventListener(name: string, callback?: (any) => void) {\n    const callbacks = this.eventSubscriptions.get(name);\n    if (!callbacks) {\n      return;\n    }\n    if (callback) {\n      callbacks.delete(callback);\n      if (callbacks.size > 0) {\n        return;\n      }\n    }\n    this.eventSubscriptions.delete(name);\n    this.confirmedEventSubscriptions.delete(name);\n    const ws = this.ws;\n    if (!ws) {\n      return;\n    }\n    ws.send(encode(new EventUnsubscribe(name)));\n  }\n\n  /**\n   * Start publishing to a receiver\n   * @param {string} name Name of the receiver to start publishing to\n   * @return {Promise<void>}\n   */\n\n  async startPublishing(name: string) {\n    if (this.confirmedReceivers.has(name)) {\n      return;\n    }\n    this.receivers.add(name);\n    if (this.ws) {\n      this.sendPublishRequest(name).catch((error) => {\n        this.emit('error', error);\n      });\n    }\n    const errorWithTrace = new Error();\n    await new Promise((resolve, reject) => {\n      const handleCloseRequested = () => {\n        clearTimeout(timeout);\n        this.removeListener('closeRequested', handleCloseRequested);\n        this.removeListener('error', handleError);\n        this.removeListener('publishRequestSuccess', handlePublishRequestSuccess);\n        resolve();\n      };\n      const timeout = setTimeout(() => {\n        this.removeListener('closeRequested', handleCloseRequested);\n        this.removeListener('error', handleError);\n        this.removeListener('publishRequestSuccess', handlePublishRequestSuccess);\n        this.stopPublishing(name);\n        const error = new PublishError(name, `Publish timeout after ${Math.round(this.timeoutDuration / 100) / 10} seconds`, 504);\n        error.stack = [error.message].concat(errorWithTrace.stack.split('\\n').slice(1)).join('\\n');\n        reject(error);\n      }, this.timeoutDuration + 1000);\n      const handleError = (error:Error | PublishError) => {\n        if (!(error instanceof PublishError)) {\n          return;\n        }\n        if (error.itemName !== name) {\n          return;\n        }\n        if (error.code === 502) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('closeRequested', handleCloseRequested);\n        this.removeListener('error', handleError);\n        this.removeListener('publishRequestSuccess', handlePublishRequestSuccess);\n        this.stopPublishing(name);\n        error.stack = [error.message].concat(errorWithTrace.stack.split('\\n').slice(1)).join('\\n'); // eslint-disable-line no-param-reassign\n        reject(error);\n      };\n      const handlePublishRequestSuccess = (n:string) => {\n        if (n !== name) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('closeRequested', handleCloseRequested);\n        this.removeListener('error', handleError);\n        this.removeListener('publishRequestSuccess', handlePublishRequestSuccess);\n        resolve();\n      };\n      this.on('closeRequested', handleCloseRequested);\n      this.on('error', handleError);\n      this.on('publishRequestSuccess', handlePublishRequestSuccess);\n    });\n  }\n\n  /**\n   * Publish message to a receiver\n   * @param {string} name Name of the receiver\n   * @param {any} message Value to publish, should not contain undefined values\n   * @return {Promise<void>}\n   */\n  publish(name: string, message: any) {\n    if (!this.receivers.has(name)) {\n      throw new Error('Receiver does not exist, call startPublishing()');\n    }\n    if (typeof message === 'undefined') {\n      throw new Error('Unable to publish undefined values');\n    }\n    const ws = this.ws;\n    if (ws) {\n      ws.send(encode(new PublisherMessage(name, message)));\n    } else {\n      const publishQueue = this.publishQueueMap.get(name) || [];\n      publishQueue.push(message);\n      this.publishQueueMap.set(name, publishQueue);\n    }\n  }\n\n  /**\n   * Send event subscribe request to server\n   * @param {string} name Name of the event to listen for\n   * @return {Promise<void>}\n   */\n\n  sendPublishRequest(name: string):Promise<void> {\n    let promise = this.publishRequestPromises.get(name);\n    if (promise) {\n      return promise;\n    }\n    promise = this._sendPublishRequest(name); // eslint-disable-line no-underscore-dangle\n    this.publishRequestPromises.set(name, promise);\n    promise.then(() => {\n      this.publishRequestPromises.delete(name);\n    }).catch(() => {\n      this.publishRequestPromises.delete(name);\n    });\n    return promise;\n  }\n\n  async _sendPublishRequest(name: string) {\n    if (this.connectionQueue.size > 0) {\n      this.logger.warn(`Not sending publish request, ${this.connectionQueue.size} pending ${this.connectionQueue.size === 1 ? 'connection' : 'connections'}`);\n      this.emit('publishRequestCredentialsCheck', name);\n      return;\n    }\n    if (this.credentialQueue.size > 0) {\n      this.logger.warn(`Not sending publish request, ${this.credentialQueue.size} pending ${this.credentialQueue.size === 1 ? 'credential' : 'credentials'}`);\n      this.emit('publishRequestCredentialsCheck', name);\n      return;\n    }\n    const ws = this.ws;\n    if (!ws) {\n      throw new PublishError(name, 'Connection closed before a publish request was sent', 502);\n    }\n    await new Promise((resolve, reject) => {\n      const handlePublishResponse = (n, success, code, message) => {\n        if (n !== name) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        this.removeListener('error', handleError);\n        this.removeListener('publishResponse', handlePublishResponse);\n        if (success === true) {\n          this.confirmedReceivers.add(name);\n          this.emit('publishRequestSuccess', name);\n          const publishQueue = this.publishQueueMap.get(name) || [];\n          while (publishQueue.length > 0) {\n            this.publish(name, publishQueue.shift());\n          }\n          this.publishQueueMap.delete(name);\n          resolve();\n        } else {\n          const error = new PublishError(name, message, code);\n          reject(error);\n        }\n      };\n      const handleClose = () => {\n        clearTimeout(timeout);\n        this.removeListener('publishResponse', handlePublishResponse);\n        this.removeListener('close', handleClose);\n        this.removeListener('error', handleError);\n        const closeError = new PublishError(name, 'Connection closed before an publish response was received', 502);\n        reject(closeError);\n      };\n      const handleError = (error:Error | PublishError) => {\n        if (isTransactionError(error)) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('publishResponse', handlePublishResponse);\n        this.removeListener('close', handleClose);\n        this.removeListener('error', handleError);\n        if (error instanceof ConnectionError) {\n          reject(new PublishError(name, `Connection error received before an publish response was received: ${error.message || 'Unknown error'}`, 502));\n          return;\n        }\n        reject(new PublishError(name, `Error received before an publish response was received: ${error.message || 'Unknown error'}`, 500));\n      };\n      const timeout = setTimeout(() => {\n        this.removeListener('publishResponse', handlePublishResponse);\n        this.removeListener('close', handleClose);\n        this.removeListener('error', handleError);\n        const error = new PublishError(name, `Publish response timeout after ${Math.round(this.timeoutDuration / 100) / 10} seconds`, 504);\n        reject(error);\n      }, this.timeoutDuration);\n      this.on('publishResponse', handlePublishResponse);\n      this.on('close', handleClose);\n      this.on('error', handleError);\n      ws.send(encode(new PublishRequest(name)));\n    });\n  }\n\n  /**\n   * Stop publishing to a receiver.\n   * @param {string} name Name of the receiver to stop publishing to\n   * @param {(...any) => void} [callback] Callback\n   * @return {Promise<void>}\n   */\n  stopPublishing(name: string) {\n    if (!this.receivers.has(name)) {\n      return;\n    }\n    this.receivers.delete(name);\n    this.confirmedReceivers.delete(name);\n    if (!this.ws) {\n      return;\n    }\n    this.ws.send(encode(new Unpublish(name)));\n  }\n\n  declare id:string;\n  declare address:string;\n  declare logger: Logger;\n  declare connectionQueue: PQueue;\n  declare credentialQueue: PQueue;\n  declare connectionHash: string | void;\n  declare credentials: Object;\n  declare subscriptions: Set<string>;\n  declare confirmedSubscriptions: Set<string>;\n  declare receivers: Set<string>;\n  declare confirmedReceivers: Set<string>;\n  declare eventSubscriptions: Map<string, Set<(...any) => void>>;\n  declare confirmedEventSubscriptions: Set<string>;\n  declare ws: void | WebSocket;\n  declare data:ObservedRemoveMap<string, any>;\n  declare timeoutDuration: number;\n  declare reconnectAttempts: number;\n  declare shouldReconnect: boolean;\n  declare reconnectAttemptResetTimeout: TimeoutID;\n  declare reconnectTimeout: TimeoutID;\n  declare reconnectHandler: (Object) => boolean;\n  declare publishQueueMap: Map<string, Array<any>>;\n  declare subscribeRequestPromises: Map<string, Promise<void>>;\n  declare eventSubscribeRequestPromises: Map<string, Promise<void>>;\n  declare publishRequestPromises: Map<string, Promise<void>>;\n  declare reconnectErrorWithTrace: Error | void;\n  static ConnectionError:Class<ConnectionError>;\n}\n\nClient.ConnectionError = ConnectionError;\n"]}